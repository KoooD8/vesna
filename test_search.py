#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ Reddit
"""

import requests

def test_reddit_search():
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    })
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ Reddit...")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    url = "https://www.reddit.com/r/OpenAI/search.json"
    params = {
        'q': 'GPT-5',
        'restrict_sr': 'true',
        'limit': 5,
        'sort': 'new',
        't': 'month'
    }
    
    try:
        response = session.get(url, params=params, timeout=10)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            posts = data.get('data', {}).get('children', [])
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
            
            for i, post in enumerate(posts[:3], 1):
                post_data = post.get('data', {})
                print(f"\n{i}. {post_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   –°—É–±—Ä–µ–¥–¥–∏—Ç: r/{post_data.get('subreddit', 'unknown')}")
                print(f"   –ê–≤—Ç–æ—Ä: u/{post_data.get('author', 'unknown')}")
                print(f"   –û—á–∫–∏: {post_data.get('score', 0)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    test_reddit_search()
